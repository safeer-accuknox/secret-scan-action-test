name: AccuKnox Secret Scan TEST
description: Scan secrets in your repository and send the results to AccuKnox.

inputs:
  token:
    description: 'The token for authenticating with the control plane.'
    required: true

  tenant_id:
    description: "The ID of the tenant associated with the control plane."
    required: true

  secret_scan_type:
    description: "Source type for scanning (git, huggingface, s3)"
    required: true
    default: "git"
    options: 
      - git
      - huggingface
      - s3

  label:
    description: "The label created in AccuKnox SaaS for associating scan results."
    required: true

  endpoint:
    description: "Control Plane URL to push the scan results."
    required: true
    default: "cspm.demo.accuknox.com"

  results:
    description: "Specifies which type(s) of results to output: verified, unknown, unverified, filtered_unverified. Defaults to all types."
    required: false

  fail:
    description: "Fail the pipeline if secrets are found"
    required: false
    default: "false"

  branch:
    description: "Branch to scan. Use 'all-branches' to scan all branches"
    required: false

  exclude-paths:
    description: "Paths to exclude from the scan."
    required: false

  dataset:
    description: "Dataset name (required if secret_scan_type is 'huggingface')"
    required: false

  huggingface_token:
    description: "Huggingface Token (required if secret_scan_type is 'huggingface')"
    required: false

  bucket_name:
    description: "S3 Bucket Name (required if secret_scan_type is 's3')"
    required: false

  use_extended_ruleset:
    description: "Enable extended regex rules for detecting sensitive data"
    required: false
    default: "false"

  extended_ruleset_path:
    description: "Path or URL for the extended ruleset"
    required: false
    default: "https://raw.githubusercontent.com/safeer-accuknox/secret-scan-action-test/refs/heads/main/config.yml"

  args:
    description: "Additional arguments to pass."
    required: false

runs:
  using: "composite"
  steps:
    - name: Run Secrets Scan engine
      run: |
        SECRET_SCAN_TYPE=""

        RESULTS_FLAG=""
        if [[ -n "${{ inputs.results }}" ]]; then
          RESULTS_FLAG="--results ${{ inputs.results }}"
        fi

        FAIL_FLAG=""
        if [[ "${{ inputs.fail }}" == "true" ]]; then
          FAIL_FLAG="--fail"
        fi

        EXTRA_ARGS=""
        if [[ -n "${{ inputs.args }}" ]]; then
          EXTRA_ARGS="${{ inputs.args }}"
        fi

        CONFIG_OPTION=""
        CONFIG_FILE="extended_ruleset_path.yml"
        if [[ "${{ inputs.use_extended_ruleset }}" == "true" ]]; then
            if [[ "${{ inputs.extended_ruleset_path }}" =~ ^https?:// ]]; then
                curl -L -o "$CONFIG_FILE" "${{ inputs.extended_ruleset_path }}"
            else
                cp "${{ inputs.extended_ruleset_path }}" "$CONFIG_FILE"
            fi
            CONFIG_OPTION="--config /$CONFIG_FILE"
        else
            CONFIG_OPTION=""
        fi

        EXCLUDE_FLAG=""
        BRANCH_FLAG=""
        if [[ "${{ inputs.secret_scan_type }}" == "git" ]]; then
          SECRET_SCAN_TYPE="git file:///pwd"

          if [[ -n "${{ inputs.exclude-paths }}" ]]; then
            EXCLUDE_FLAG="-x /pwd/${{ inputs.exclude-paths }}"
          fi

          if [[ "${{ inputs.branch }}" == "all-branches" ]]; then
            BRANCH_FLAG=""
          elif [[ -n "${{ inputs.branch }}" ]]; then
            BRANCH_FLAG="--branch=${{ inputs.branch }}"
          else
            if [[ -n "${{ github.event.pull_request.head.ref }}" ]]; then
              BRANCH_FLAG="--branch=${{ github.event.pull_request.head.ref }}"
            else
              BRANCH_FLAG="--branch=${{ github.ref_name }}"
            fi
          fi
        fi
        DATASET_FLAG=""
        if [[ "${{ inputs.secret_scan_type }}" == "huggingface" ]]; then
          SECRET_SCAN_TYPE="huggingface"
          if [[ -z "${{ inputs.dataset }}" ]]; then
            echo "Error: 'dataset' input is required when secret_scan_type is 'huggingface'."
            exit 1
          fi
          if [[ -z "${{ inputs.huggingface_token }}" ]]; then
            echo "Error: 'huggingface_token' input is required when secret_scan_type is 'huggingface'."
            exit 1
          fi
          DATASET_FLAG="--dataset=${{ inputs.dataset }}"
        fi
        BUCKET_FLAG=""
        if [[ "${{ inputs.secret_scan_type }}" == "s3" ]]; then
          SECRET_SCAN_TYPE="s3"
          if [[ -z "${{ inputs.bucket_name }}" ]]; then
            echo "Error: 'bucket_name' input is required when secret_scan_type is 's3'."
            exit 1
          fi
          BUCKET_FLAG="--bucket=${{ inputs.bucket_name }}"
        fi

        echo docker run --rm -e HUGGINGFACE_TOKEN="${{ inputs.huggingface_token }}" -v $PWD/extended_ruleset_path.yml:/extended_ruleset_path.yml -v "$PWD:/pwd" trufflesecurity/trufflehog:3.88.1 $SECRET_SCAN_TYPE --json --no-update $BUCKET_FLAG $DATASET_FLAG $BRANCH_FLAG $RESULTS_FLAG $CONFIG_OPTION $FAIL_FLAG $EXCLUDE_FLAG $EXTRA_ARGS 
        
        docker run --rm -e HUGGINGFACE_TOKEN="${{ inputs.huggingface_token }}" -v $PWD/extended_ruleset_path.yml:/extended_ruleset_path.yml -v "$PWD:/pwd" trufflesecurity/trufflehog:3.88.1 $SECRET_SCAN_TYPE --json --no-update $BUCKET_FLAG $DATASET_FLAG $BRANCH_FLAG $RESULTS_FLAG $CONFIG_OPTION $FAIL_FLAG $EXCLUDE_FLAG $EXTRA_ARGS > trufflehog-results.json || exit_code=$?
        
        echo "TRUFFLEHOG_EXIT_CODE=${exit_code:-0}" >> $GITHUB_ENV
      shell: bash

    - name: Push report to Control Plane
      run: |
        if [[ ! -s trufflehog-results.json ]]; then
          echo "No secrets found. Skipping API upload."
          exit 0
        fi
        
        RESPONSE=$(curl --location 'https://${{ inputs.endpoint }}/api/v1/artifact/?tenant_id=${{ inputs.tenant_id }}&data_type=TruffleHog&save_to_s3=true&label_id=${{ inputs.label }}' \
            --header 'Tenant-Id: ${{ inputs.tenant_id }}' \
            --header 'Authorization: Bearer ${{ inputs.token }}' \
            --form 'file=@./trufflehog-results.json')

            echo "Response: $RESPONSE"
            if [[ "$RESPONSE" != *"File received successfully"* ]]; then
              echo "Error: Failed to push report to control plane"
              exit 1
            fi
      shell: bash

    - name: Quality Check with exit_code
      if: env.TRUFFLEHOG_EXIT_CODE == '183'
      run: |
        echo "Scan Engine found credentials. Failing the job."
        exit 1
      shell: bash

branding:
  icon: "lock"
  color: "purple"
